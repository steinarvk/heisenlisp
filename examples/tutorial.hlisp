;; TODO: make test suite check ==> comments.

;; === Arithmetic in Lisp ===

;; Lisps operate fairly consistently on "prefix notation". This means that
;; a Lisp expression consists of first an operator or function, followed by
;; its arguments. To separate expressions, each is enclosed in parentheses.

;; You can do simple arithmetic like this by simply writing such expressions
;; into a Lisp interpreter:

(+ 2 2)    ;; ==> 4
(+ 1 1 1)  ;; ==> 3

;; Of course, expressions can contain sub-expressions. For instance, what
;; we'd write in conventional mathematical notation as "1 + 2 * 3", in
;; Lisp we would write like this:

(+ 1 (* 2 3))  ;; ==> 7

;; Note that because every expression is enclosed in parentheses, there is no
;; need to remember rules such as "multiplication before addition". Lisp
;; expressions are inherently unambiguous.

;; The = function is used to compare two values for equality. (Unlike in some
;; other programming languages, = is not an "assignment operator".)

(= 4 (+ 2 2))  ;; ==> true
(= 5 (+ 2 2))  ;; ==> false

;; All the basic arithmetic functions exist in Heisenlisp: addition,
;; subtraction, multiplication, division, and taking the remainder.

(+ 12 6)          ;; ==> 18
(- 12 6)          ;; ==> 6
(* 12 6)          ;; ==> 72
(/ 12 6)          ;; ==> 2
(remainder 12 6)  ;; ==> 0

;; The four basic operations work with any number of arguments. For
;; addition and multiplication, this is perfectly intuitive:

(+ 1 2 3 4 5)  ;; ==> 15
(* 1 2 3 4 5)  ;; ==> 120

;; For subtraction, by convention it means: "take the first number
;; and subtract all the other numbers from it". For instance,
;; (- 1 2 3 4 5) is what we would usually write as "1 - 2 - 3 - 4 - 5".

(- 1 2 3 4 5)  ;; ==> -13

;; Similarly, for division multiple arguments means: "divide the first
;; number by all the others".

(/ 120 2 3 4)  ;; ==> 5

;; Inconsistently but intuitively, "subtraction" with just a single argument
;; is in fact not subtraction at all, but negation.

(- 42)   ;; ==> -42
(- -42)  ;; ==> 42

;; In fact, these functions even have a "zero-argument" form. It returns the
;; mathematical "identity" for the operation in question. For instance, for
;; + it returns 0, because given any number, x + 0 is just x.

(+)  ;; ==> 0
(-)  ;; ==> 0
(*)  ;; ==> 1

;; That might be a little hard to grasp, but you may be able to see how it
;; fits into a larger pattern:

(* (* 2 3) (* 4 5))  ;; ==> 120
(* (* 2) (* 3 4 5))  ;; ==> 120
(* (*) (* 2 3 4 5))  ;; ==> 120

;; === Simple values that aren't numbers ===

;; Numbers aren't the only values in Heisenlisp.

;; In fact, we've already seen one other kind of value: the "boolean".

(= 2 (+ 1 1))  ;; ==> true

;; A "boolean" type is one that has exactly two possible values: true and
;; false. So far, when we've made comparisons, one of these values is what
;; we've gotten back.

;; There is a string type which can store text strings:

"Hello world!"  ;; ==> "Hello world!"

;; There is a "nil" value. It is often used to denote the absence of a value.
;; It will become especially important later, when we learn about lists.
;; (Spoiler warning: nil is the Lisp representation of the empty list; the
;; list that has no elements.)

nil  ;; ==> nil

;; Note that not all values that look or feel similar are actually equal.

;; 0 isn't the same as false, and 1 isn't the same as true.

(= 0 false)  ;; ==> false
(= 1 true)   ;; ==> true

;; The strings "true" and "false" are not the same as the boolean values true
;; and false.

(= "true" true)    ;; ==> false
(= "false" false)  ;; ==> false

;; nil is not the same as false.

(= nil false)  ;; ==> false

;; However, different representations of numbers _are_ considered equal.

(= 42 42.0)  ;; ==> true

;; === Conditionals and logic ===

;; Now let's learn about "if". "if" isn't exactly a function, but we can
;; begin by thinking of it as one. "if" is Lisp's way of expressing branching:
;; "if X, then Y, otherwise Z".

(if (= 2 (+ 1 1)) "same" "different")  ;; ==> "same"
(if (= 3 (+ 1 1)) "same" "different")  ;; ==> "different"

;; Most values are "truthy". This means that if they are used as a
;; condition in an if-statement, the then-clause will be triggered:

(if true "truthy" "falsey")  ;; ==> "truthy"
(if 42 "truthy" "falsey")    ;; ==> "truthy"
(if -42 "truthy" "falsey")   ;; ==> "truthy"

;; In fact, the only "falsey" values are:
;;   - the number zero (in any form)
;;   - nil
;;   - false

(if 0 "truthy" "falsey")      ;; ==> "falsey"
(if false "truthy" "falsey")  ;; ==> "falsey"
(if nil "truthy" "falsey")    ;; ==> "falsey"

;; If we wanted to check several conditions at once, we could start nesting
;; if statements within other if statements:

(if true (if false 1 2) 3)  ;; ==> 2

;; But in fact, the logical operators AND, OR, and NOT provide a better way.

(if (and (= 2 (+ 1 1)) (= 3 (+ 1 1))) "yes" "no")        ;; ==> "no"
(if (or (= 2 (+ 1 1)) (= 3 (+ 1 1))) "yes" "no")         ;; ==> "yes"
(if (and (= 2 (+ 1 1)) (not (= 3 (+ 1 1)))) "yes" "no")  ;; ==> "yes"

;; === Defining functions ===

;; TODO

(defun! odd? (n) (= (remainder n 2) 1))

;; This function 

;; === Recursive functions ===

(defun! factorial (n)
  (if (zero? n)
      1
      (* n (factorial (- n 1)))))

(factorial 0)  ;; ==> 1
(factorial 1)  ;; ==> 1
(factorial 2)  ;; ==> 2
(factorial 3)  ;; ==> 6
(factorial 4)  ;; ==> 24
(factorial 5)  ;; ==> 120

;; === Conses and lists ===

;; TODO

