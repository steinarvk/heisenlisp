(set! list-one (list 1 2 3 4 5 6 7 8 9 10))
(set! list-two (list 1 2 3 4 5 (any-of 6 11) 7 8 9 10))

;; Note: This pattern of processing a list recursively might be
;;       infeasible, once we get into elements meant to represent
;;       lists of unknown length. (Come to think of it; how should
;;       this function work for (my-contains? 42 unknown)?
;;       The right answer would be "maybe", but can we make that
;;       computable with this pattern, given that (empty? unknown)
;;       is also maybe?
(defun! my-contains? (element xs)
  (if (empty? xs)
      false
      (if (= (car xs) element)
          true
          (my-contains? element (cdr xs)))))

(defun! my-count-if (f xs)
  (if (empty? xs)
      0
      (+ (if (f (car xs)) 1 0)
         (my-count-if f (cdr xs)))))

(defun! equal-to (y) (lambda (x) (= x y)))

(expect! "true" (my-contains? 6 list-one))
(expect! "false" (my-contains? 60 list-one))

(expect! "true" (my-contains? 5 list-two))
(expect! "false" (my-contains? 12 list-two))
(expect! "maybe" (my-contains? 11 list-two))
(expect! "maybe" (my-contains? 6 list-two))

(expect! "0" (my-count-if (equal-to 42) list-one))
(expect! "1" (my-count-if (equal-to 7) list-one))
(expect! "maybe" (= 1 (my-count-if (equal-to 6) list-two)))
(expect! "false" (> (my-count-if (equal-to 6) list-two) 1))
