(defun! list (&rest xs) xs)

(defun! zero? (n) (_atom-eq? 0 n))

(defun! nil? (x) (_atom-eq? nil x))

(defun! first (xs) (car xs))
(defun! second (xs) (car (cdr xs)))
(defun! third (xs) (car (cdr (cdr xs))))

(defun! _dumb-equals? (a b)
  (_atom-eq? (_to-string a) (_to-string b)))

(defmacro! cond (clause &rest more-clauses)
  `(if ,(first clause)
       ,(second clause)
       ,(if (nil? more-clauses)
            nil
            (cons 'cond more-clauses))))

(defun! inc (n) (+ n 1))
(defun! dec (n) (- n 1))
