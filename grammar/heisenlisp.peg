{
  package parser

  import (
    "strings"
    "io"
    "unicode"
    "strconv"
    "errors"
    "os"
    "io/ioutil"
    "bytes"
    "fmt"
    "unicode/utf8"

    "github.com/steinarvk/heisenlisp/value/str"
    "github.com/steinarvk/heisenlisp/value/unknowns/fullyunknown"
    "github.com/steinarvk/heisenlisp/types"
    "github.com/steinarvk/heisenlisp/number"

    sexpr "github.com/steinarvk/heisenlisp/expr"
  )
}

MultiExpr <- rv:WhitespaceThenExpr+ _ EOF {
  return rv, nil
}

SingleExpr <- rv:Expr _ EOF {
  return rv, nil
}

Expr <- (
    ListExpr
  / String
  / QuotingExpr
  / Real
  / Rational
  / Integer
  / Identifier
  / Unknown
)

Unknown <- "#unknown" { return fullyunknown.Value, nil }


LPAREN <- "("
RPAREN <- ")"

oneWhitespace <- ( [ \t\r\n] / comment )
comment <- ";;" [^\n]*

sp "mandatory whitespace" <- oneWhitespace+
_ "whitespace" <- oneWhitespace*

EscapedChar <- [\x00-\x1f"\\]
EscapeSequence <- SingleCharEscape / UnicodeEscape
SingleCharEscape <- ["\\/bfnrt]
UnicodeEscape <- 'u' HexDigit HexDigit HexDigit HexDigit
HexDigit <- [0-9a-f]i

Identifier <- [a-zA-Z?!+/*.=_&<>-] [a-zA-Z0-9?!+/*.=&<>-]* {
  return sexpr.ToSymbol(string(c.text)), nil
}

String <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
  s, err := strconv.Unquote(string(c.text))
  if err != nil {
    return nil, err
  }
  return str.New(s), nil
}

Real <- (
    ( '-'? [0-9] [0-9]* '.' [0-9]* )
  / ( '-'? [0-9] [0-9]* ('.' [0-9]*)? [eE] '-'? [0-9]+ )
) {
  return number.FromString(string(c.text))
}

Rational <- ( '-'? [0-9]+ '/' [0-9]+ ) {
  return number.FromString(string(c.text))
}

Integer <- ( "0" / '-'? [1-9] [0-9]* ) {
  return number.FromString(string(c.text))
}

WhitespaceThenExpr <- _ rv:Expr {
  return rv, nil
}

ListExpr <- _ LPAREN _ more:WhitespaceThenExpr* _ RPAREN {
  var rv []types.Value

  for _, another := range more.([]interface{}) {
    rv = append(rv, another.(types.Value))
  }

  return sexpr.WrapList(rv), nil
}

QuotingExpr <- (
    QuotedExpr
  / QuasiQuotedExpr
  / SplicingUnquotedExpr
  / UnquotedExpr
)

QuotedExpr <- "'" _ rv:Expr {
  return sexpr.WrapInUnary("quote", rv.(types.Value)), nil
}

QuasiQuotedExpr <- "`" _ rv:Expr {
  return sexpr.WrapInUnary("quasiquote", rv.(types.Value)), nil
}

UnquotedExpr <- "," _ rv:Expr {
  return sexpr.WrapInUnary("unquote", rv.(types.Value)), nil
}

SplicingUnquotedExpr <- ",@" _ rv:Expr {
  return sexpr.WrapInUnary("unquote-splicing", rv.(types.Value)), nil
}

EOF <- !.
